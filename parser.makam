%use fg.
%open syntax.

program_ : syntax program.
program_concr : syntax (concrete program).

decl : syntax decl.

action : type.

select_action : string -> action.
type_ass_action : string -> action.
method_call_action : string -> list expr -> action.

expr_action : expr -> list action -> expr.

action : syntax action.

%  Extra constructors
cmethod_sig, cmethod_spec : type.
cmethod_sig : list (tuple (concrete.name expr) string) -> string -> cmethod_sig.
cmethod_spec : string -> cmethod_sig -> cmethod_spec.

cmethod_decl : (concrete.name expr) -> string -> cmethod_spec -> expr -> decl.

cmethod_spec : syntax cmethod_spec.
method_spec : syntax method_spec.

ignore_arg_names_method_spec : syntax method_spec.
ignore_arg_name_typed_var : syntax string.

typed_var : syntax (tuple (concrete.name expr) string).

exprvar : concrete.namespace expr.

expr, baseexpr : syntax expr.

type_lit : syntax type_lit.

typed_field : syntax (tuple string string).

main_expr : syntax expr.

import_stmt_ : syntax import_stmt.

goident_, goident, ident_first, ident_rest : syntax string.
syntax.rule ident_first (charclass "abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ").
syntax.rule ident_rest (charclass "abcdefghijklmnopqrstuvwxyz_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ").
syntax.rule goident_ (charcons ident_first (charmany ident_rest)).
`(syntax.def_js goident (token goident_)).

`(syntax_rules <<
  program_concr -> concrete { <program_> }

  program_ ->
    program
      {
        "package" "main" ";"
        <list_sep (token "") import_stmt_>
        <list_sep (token "") decl>
        "func" "main" "(" ")" "{"
          <main_expr>
        "}"
      }

  import_stmt_ ->
    import_stmt { "import" <makam.string_literal> ";" }

  main_expr ->
       { "_" "=" <expr> }
    /  { "fmt" "." "Printf" "(" "\"%#v\"" "," <expr> ")" }

  decl ->
    type_decl  { "type" <goident> <type_lit> ";" }
  / (fun self => cmethod_decl (concrete.name exprvar self))
     { "func" "(" <goident> <goident> ")" <cmethod_spec> "{" "return" <expr> "}" ";" }

  method_spec ->
    (fun name => fun types => fun return => method_spec name (method_sig types return))
      { <goident> "(" <list_sep (token ",")  goident> ")" <goident> }

  cmethod_spec ->
    (fun name => fun args => fun tipo => cmethod_spec name (cmethod_sig args tipo))
       { <goident> "(" <list_sep (token ",") typed_var> ")" <goident> }

  typed_var ->
    (fun x => fun y => (tuple (concrete.name exprvar x) y)) { <goident> <goident> }

  expr ->
    expr_action { <baseexpr> "." <list_sep_plus (token ".") action > }
  / (fun x => x) { <baseexpr> }

  action ->
    type_ass_action    { "(" <goident> ")" }
  / method_call_action { <goident> "(" <list_sep (token ",") expr > ")" }
  / select_action      { <goident> }
 

  baseexpr ->
    struct_lit  { <goident> "{" <list_sep (token ",") expr> "}" }
  / (fun name => concrete.var (concrete.name exprvar name)) { <goident> }
  / { "(" <expr> ")" }

  type_lit ->
    struct    { "struct" "{" <list_sep (token ";") typed_field> "}" }
  / interface { "interface" "{" <list_sep (token ";") ignore_arg_names_method_spec> "}"}

  ignore_arg_names_method_spec ->
    (fun name => fun types => fun return => method_spec name (method_sig types return))
      { <goident> "(" <list_sep (token ",") ignore_arg_name_typed_var> ")" <goident> }

  ignore_arg_name_typed_var ->
    { "_" <goident> }
  / (fun name => fun type_name => type_name) { <goident> <goident> }

  typed_field ->
    tuple { <goident> <goident> }
>>).
`(syntax.def_toplevel_js program_concr).

concrete.pick_namespace_userdef (_: expr) exprvar.


concrete.resolve_conversion
  (cmethod_decl Self TySelf Spec Expr)
  (method_decl TySelf Spec' (concrete.bindone Self (concrete.bindmany Largs Expr))) :-
    eq Spec (cmethod_spec MethodName (cmethod_sig LAT RetTy)),
    zip Largs Ltype LAT,
    eq Spec' (method_spec MethodName (method_sig Ltype RetTy)).


apply_actions : expr -> list action -> expr -> prop.

concrete.resolve_conversion
  (expr_action Expr As)
  E' :-
    apply_actions Expr As E'.

apply_actions E [] E.
apply_actions E ( (select_action Field) :: TL) E' :-
  apply_actions (select E Field) TL E'.
apply_actions E ( (method_call_action Name Args) :: TL) E' :-
  apply_actions (method_call E Name Args) TL E'.
apply_actions E ( (type_ass_action Ty) :: TL) E' :-
  apply_actions (type_ass E Ty) TL E'.
